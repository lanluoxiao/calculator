{"version":3,"sources":["Library.js","App.js","index.js"],"names":["findAffix","string","prefix","returnSet","Set","s","p","startsWith","add","slice","length","isUnique","alphabet","rawLanguage","language","every","x","includes","newLanguage","codeword","letter","push","replace","wildcardExpansion","affix","moreAffix","size","console","log","intersect","filter","has","Output","props","codewordList","id","App","state","subsets","inputValue","handleSubmit","bind","handleChange","handleSelect","event","this","setState","target","value","split","concat","preventDefault","alert","index","tmpList","splice","codewords","map","key","onClick","handleDelete","onChange","join","onSubmit","type","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7dea9455.chunk.js","sourcesContent":["const findAffix = (string, prefix) => {\n    let returnSet = new Set();\n    for (let s of string) {\n        for (let p of prefix) {\n            if (s.startsWith(p) && s !== p) returnSet.add(s.slice(p.length))\n        }\n    }\n    return returnSet\n}\n\nconst wildcardExpansion = (alphabet, rawLanguage) => {\n    let language = [...rawLanguage]\n    while (!language.every(x => !x.includes('U'))) {\n        let newLanguage = []\n        for (let codeword of language) {\n            if (codeword.includes('U')) {\n                for (let letter of alphabet) {\n                    newLanguage.push(codeword.replace('U', letter))\n                }\n            } else {\n                newLanguage.push(codeword)\n            }\n        }\n        language = newLanguage\n    }\n    return language\n}\n\nconst isUnique = (alphabet, rawLanguage) => {\n    let language = new Set(wildcardExpansion(alphabet, rawLanguage));\n    let affix = new Set();\n    let moreAffix = findAffix(language, language);\n    let size = 0;\n\n    do {\n        size = affix.size\n        affix = new Set([...affix, ...moreAffix])\n        console.log(affix, language)\n        moreAffix = new Set([...findAffix(language, affix), ...findAffix(affix, language)])\n    } while (affix.size > size)\n    let intersect = [...language].filter(x => affix.has(x))\n    console.log(intersect);\n    if (intersect.length === 0) return '是唯一码'\n    else return '不是唯一码'\n}\n\nexport default isUnique\n","import React, {Component, Fragment} from 'react';\nimport isUnique from './Library.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subsets: 2,\n      alphabet: ['A', 'B'],\n      codewordList: [\n        'AU',\n        'AUB',\n        'AUBB'\n      ],\n      inputValue: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({inputValue: event.target.value});\n  }\n\n  handleSubmit(event) {\n    if (this.state.inputValue.split('').every(x => this.state.alphabet.includes(x) || x === 'U')) {\n      this.setState(\n        state => ({\n          codewordList: state.codewordList.concat([state.inputValue]),\n          inputValue: ''\n        })\n      );\n      event.preventDefault();\n    } else {\n      alert('不符合要求');\n      event.preventDefault();\n    }\n  }\n\n  handleSelect(event) {\n    this.setState({\n      subsets: event.target.value,\n      alphabet: ['A', 'B', 'C', 'D'].slice(0, event.target.value),\n      codewordList: []\n    });\n  }\n\n  handleDelete(index) {\n    let tmpList = [...this.state.codewordList];\n    tmpList.splice(index, 1);\n    this.setState({codewordList: tmpList});\n  }\n\n  render() {\n    let codewords = this.state.codewordList.map((codeword, index) => <li key={index}>{codeword}<button onClick={this.handleDelete.bind(this, index)}>×</button></li>)\n    return (\n      <Fragment>\n        <div id=\"left\">\n          <h2>输入</h2>\n          <p>键盘数量：\n            <select value={this.state.subsets} onChange={this.handleSelect}>\n              <option value={2}>2</option>\n              <option value={3}>3</option>\n              <option value={4}>4</option>\n            </select>\n          </p>\n          <p>可用的字母为：{this.state.alphabet.join(\"、\")} 和 U</p>\n          <form onSubmit={this.handleSubmit}>\n            <input type=\"text\" value={this.state.inputValue} onChange={this.handleChange} />\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n          <ul>{codewords}</ul>\n        </div>\n        <Output alphabet={this.state.alphabet} codewordList={this.state.codewordList}/>\n      </Fragment>\n    )\n  }\n}\n\nfunction Output(props) {\n  const {alphabet, codewordList} = props;\n  return (\n    <div id=\"right\">\n      <h2>输出</h2>\n      <p>{codewordList.length === 0 ? '' : isUnique(alphabet, codewordList)}</p>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}